<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:jdbc="http://www.springframework.org/schema/jdbc" 
    xmlns:tx="http://www.springframework.org/schema/tx"
    xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd
        http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-4.2.xsd
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.2.xsd 
        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.2.xsd">

	<!-- 不要扫描spring mvc相关的controller -->
  <context:component-scan base-package="com.sc">
      <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller" />
  </context:component-scan>
  
  <!-- 引入配置文件 --> 
  <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
    <property name="ignoreUnresolvablePlaceholders" value="true" />
    <property name="locations" >
    	<list>
    		<value>classpath:dbconfig.properties</value>
    		<value>classpath:redis.properties</value>
    	</list>
    </property>
  </bean>

  <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
  	<property name="driverClassName" value="${jdbc.driverClassName}" />
	<property name="url" value="${jdbc.url}" />
	<property name="username" value="${jdbc.username}" />
	<property name="password" value="${jdbc.password}" />
	<!-- 初始化连接大小 -->
    <property name="initialSize" value="${jdbc.initialSize}" />
    <!-- 连接池最大数量 -->
    <property name="maxActive" value="${jdbc.maxActive}" />
    <!-- 连接池最大空闲 -->
    <property name="maxIdle" value="${jdbc.maxIdle}" />
    <!-- 连接池最小空闲 -->
    <property name="minIdle" value="${jdbc.minIdle}" />
    <!-- 获取连接最大等待时间 -->
    <property name="maxWait" value="${jdbc.maxWait}" />
    <property name="validationQuery">
		<value>SELECT 1</value>
	</property>
	<property name="testOnBorrow">
		<value>true</value>
	</property>
  </bean>
  
  <!-- spring和MyBatis完美整合，不需要mybatis的配置映射文件 -->
  <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
    <property name="dataSource" ref="dataSource" />
    <!-- 自动扫描mapping.xml文件 -->
    <property name="mapperLocations" >
    	<list>
			<value>classpath:com/sc/dao/*.xml</value>
		</list>
    </property>
  </bean>
  
  <bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
      <constructor-arg index="0" ref="sqlSessionFactory" />
  </bean>
  
  <!-- DAO接口所在包名，Spring会自动查找其下的类 -->
  <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer"> 
     <property name="basePackage" value="com.sc.dao" /> 
  </bean> 
  
  	<!-- (事务管理)-->  
	<aop:aspectj-autoproxy /> 
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager"> 
		<property name="dataSource" ref="dataSource" /> 
	</bean> 
	
	<tx:advice id="txAdvice" transaction-manager="transactionManager"> 
		<tx:attributes> 
			<tx:method name="select*" read-only="true" /> 
			<tx:method name="find*" read-only="true" /> 
			<tx:method name="get*" read-only="true" /> 
			<tx:method name="save*" propagation="REQUIRED" rollback-for="Exception"  /> 
			<tx:method name="del*" propagation="REQUIRED" rollback-for="Exception" /> 
			<tx:method name="update*" propagation="REQUIRED" rollback-for="Exception" /> 
			<tx:method name="add*" propagation="REQUIRED" rollback-for="Exception" /> 
		</tx:attributes> 
	</tx:advice> 
	<aop:config> 
		<aop:pointcut id="appService" expression="execution(* com.sc.service.*.*(..))" /> 
		<aop:advisor advice-ref="txAdvice" pointcut-ref="appService" /> 
	</aop:config> 

	<!-- jedis配置   start -->
	<bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">  
         <property name="maxTotal" value="32"></property>    
         <!-- 连接池的最大数据库连接数。设为0表示无限制。 -->
         <property name="maxIdle" value="6"></property>   
         <!-- 最大空闲数，数据库连接的最大空闲时间。超过空闲时间，数据库连接将被标记为不可用，然后被释放。设为0表示无限制。 -->
         <property name="maxWaitMillis" value="15000"></property>   
         <!-- 指明若在对象池空时调用borrowObject方法的行为被设定成等待，最多等待多少毫秒。如果等待时间超过了这个数值，则会抛出一个java.util.NoSuchElementException异常。如果这个值不是正数，表示无限期等待。 -->
         <property name="minEvictableIdleTimeMillis" value="300000"></property>  
         <!-- 设定在进行后台对象清理时，视休眠时间超过了多少毫秒的对象为过期。过期的对象将被回收。如果这个值不是正数，那么对休眠时间没有特别的约束。  --> 
         <property name="numTestsPerEvictionRun" value="3"></property>   
         <!-- 设定在进行后台对象清理时，每次检查几个对象。如果这个值不是正数，则每次检查的对象数是检查时池内对象的总数乘以这个值的负倒数再向上取整的结果――也就是说，如果这个值是-2（-3、-4、-5……）的话，那么每次大约检查当时池内对象总数的1/2（1/3、1/4、1/5……）左右。  -->
         <property name="timeBetweenEvictionRunsMillis" value="60000"></property>
         <!-- 每60秒运行一次空虚回收 -->
<!--          <property name="whenExhaustedAction" value="1"></property>    -->
    </bean>  
    <bean id="jedisConnectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory" destroy-method="destroy">  
        <property name="poolConfig" ref="jedisPoolConfig"></property>  
        <property name="hostName" value="${redis.hostName}"></property> 
        <property name="password" value="${redis.password}"></property>  
        <property name="port" value="${redis.port}"></property>  
        <property name="timeout" value="15000"></property>  
        <property name="usePool" value="true"></property>  
    </bean>  
    <bean id="jedisTemplate" class="org.springframework.data.redis.core.RedisTemplate">  
        <property name="connectionFactory" ref="jedisConnectionFactory"></property>  
        <property name="keySerializer">  
            <bean class="org.springframework.data.redis.serializer.StringRedisSerializer"/>  
        </property>  
        <property name="valueSerializer">  
            <bean class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer"/>  
        </property>  
    </bean>
    
    <bean id="jedisService" class="com.sc.service.impl.JedisServiceImpl"> 
 		<property name="jedisTemplate" ref="jedisTemplate" /> 
 	</bean> 
 	<!-- jedis配置   end -->
	
	<!-- 微信登陆过滤器 -->
	<bean id="wechatFilter" class="com.sc.filter.WechatFilter"></bean>
	<!-- 后台管理登陆过滤器 -->
	<bean id="managerLoginFilter" class="com.sc.filter.ManagerLoginFilter"></bean>
	
</beans>